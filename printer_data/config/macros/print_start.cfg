[include dragon_leds.cfg]

[gcode_macro PRINT_START]
gcode:
    {% set BED = printer.heater_bed.temperature|float %}
    {% set BED_TEMP = params.BED|default(100)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(230)|float %}
    {% set MATERIAL = params.MATERIAL %}

    {% if MATERIAL == "ABS" or MATERIAL == "ASA"%}
      START_HEAT_SOAK
    {% endif %}

    BED_MESH_CLEAR

    {% if printer.z_tilt.applied == False %}
      {% if "xyz" not in printer.toolhead.homed_axes %}
          STATUS_HOMING
          G28 ; home if not already homed
      {% endif %}
      STATUS_CALIBRATING_Z
      Z_TILT_ADJUST
      G28 Z
    {% endif %}

    STATUS_MESHING
    BED_MESH_CALIBRATE
    SMART_PARK

    # Wiat until we finish probing and everything before heating the nozzle to reduce filament stringing
    STATUS_HEATING
    SET_DISPLAY_TEXT MSG="Heating hotend"
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

    SET_FAN_SPEED FAN=Electronics_Bay SPEED=0.66

    STATUS_PRINTING
    SET_DISPLAY_TEXT MSG="Purging..."
    LINE_PURGE
    SET_DISPLAY_TEXT MSG="Printing..." 

[gcode_macro PRINT_END]
gcode:
  {% set MATERIAL = params.MATERIAL %}
  # Turn off bed, extruder, and fan
  TURN_OFF_HEATERS
  # Move nozzle away from print while retracting
  G91
  G1 X-2 Y-2 E-3 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  G90
  
  # Home X/Y axes to allow grabbing the print
  G90
  G1 X150 Y300 F6000
  SET_DISPLAY_TEXT MSG=""

  {% if MATERIAL == "ABS" %}
    G4 P120000
    SET_FAN_SPEED FAN=Bento SPEED=0
  {% endif %}
  
  SET_FAN_SPEED FAN=Electronics_Bay SPEED=0
  STATUS_READY
  
[gcode_macro TEST_SPEED]
gcode:
  # Speed
  {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
  # Iterations
  {% set iterations = params.ITERATIONS|default(5)|int %}
  # Acceleration
  {% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
  # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
  {% set bound = params.BOUND|default(20)|int %}
  # Size for small pattern box
  {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
  
  # Large pattern
    # Max positions, inset by BOUND
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}
  
  # Small pattern at center
    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}
  
  # Save current gcode state (absolute/relative, etc)
  SAVE_GCODE_STATE NAME=TEST_SPEED
  
  # Output parameters to g-code terminal
  { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
  
  # Home and get position for comparison later:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %} 
    # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
    G90
    G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    G4 P1000 
    GET_POSITION
  
  # Go to starting position
  G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
  
  # Set new limits
  SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}
  
  {% for i in range(iterations) %}
    # Large pattern diagonals
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
    
    # Large pattern box
    G0 X{x_min} Y{y_min} F{speed*60}
    G0 X{x_min} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_max} F{speed*60}
    G0 X{x_max} Y{y_min} F{speed*60}
  
    # Small pattern diagonals
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
    
    # Small patternbox
    G0 X{x_center_min} Y{y_center_min} F{speed*60}
    G0 X{x_center_min} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_max} F{speed*60}
    G0 X{x_center_max} Y{y_center_min} F{speed*60}
  {% endfor %}
  
  # Restore max speed/accel to their configured values
  SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
  
  # Re-home and get position again for comparison:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G90
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
    G4 P1000 
    GET_POSITION
  
  # Restore previous gcode state (absolute/relative, etc)
  RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro START_HEAT_SOAK]
gcode:
    STATUS_HEATING
    {% set SOAK = params.SOAK|default(15) %}
    {% set BED_TEMP = params.BED_TEMP|default(100)|float %}
    SET_DISPLAY_TEXT MSG="Starting Warmup" #if the bed is already at the correct target temp, we assume no heat soak is necessary.
    {% if (SOAK) <= 0 or (printer.heater_bed.target >= (BED_TEMP - 20)) %}
    {% else %}
        SET_DISPLAY_TEXT MSG="Heating for Soak"
        SET_FAN_SPEED FAN=Bento SPEED=1
        M190 S{BED_TEMP}
        SET_DISPLAY_TEXT MSG="Starting Soak"
    {% for timer in range( SOAK,0,-1) %} #we cycle once a minute, so we can send an update to keep octoprint happy, rather than just sleeping for the entire soak
        SET_DISPLAY_TEXT MSG="Soak: {timer|int}m remaining"
        M105
        G4 P60000
    {% endfor %}
    SET_DISPLAY_TEXT MSG="Soak Complete"
    {% endif %}